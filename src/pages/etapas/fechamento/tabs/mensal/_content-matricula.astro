<div class="card">
    <div class="card-body">
        <div class="title-section align-items-end justify-content-between gap-2">
            <span>Matrícula</span>
        </div>

        <section class="row">
            <div class="col-lg-4">
                <div id="chartdiv-fechamento-mensal-matricula" style="height: 400px;"></div>
            </div>

            <div class="col-lg-8">
                <div>
                    <label
                        class="d-inline-flex gap-2 mb-0 fw-bold"
                        data-bs-toggle="tooltip"
                        data-bs-html="true"
                        data-bs-custom-class="tooltip-600"
                        data-bs-title="(INSERIR AQUI O NOME DE 01 UNIDADE) e (INSERIR AQUI O NOME DE 01 UNIDADE) crescendo e performando acima da média do grupo.<br>(INSERIR AQUI O NOME DE 01 UNIDADE) performando em linha com relação o LY.<br>GAP negativo de (Nº) matrículas, atingindo XX% do resultado do primeiro semestre de (ANO ATUAL).<br><br>Carta Desafio 1º trimestre (editável): XXX meta e XXX realizado: GAP de -XXX matrículas."
                    >
                        <i class="bi bi-info-circle fs-6"></i>
                        <span>Modelo de preenchimento</span>
                    </label>

                    <label style="height: 130px;">
                        <textarea
                        id=""
                        class="form-control h-100"
                        placeholder="DESTAQUE: (NOME UNIDADE) e (NOME UNIDADE), performando, respectivamente, XX% e XX% acima do LY.
Performance do grupo acima do LY, mas muito por conta da inauguração de (NOME UNIDADE) em XX/XX. Fechamento do ano com atingimento de XX% do LY e XX% da carta-meta."></textarea>
                    </label>
                </div>

            </div>
    </div>
</div>

<script is:inline>
    am4core.ready(function () {
        am4core.useTheme(am4themes_animated);

        const chart = am4core.create('chartdiv-fechamento-mensal-matricula', am4charts.XYChart)

        chart.maskBullets = false;
        chart.padding(30, 0, 0, 0);
        chart.language.locale = am4lang_pt_BR;
        if(chart.logo){ chart.logo.disabled = true;}

        chart.data = [
            {
                category: 'Janeiro',
                anoAnterior: 773,
                anoAtual: 762,
            },
        ]

        const xAxis = chart.xAxes.push(new am4charts.CategoryAxis())
        xAxis.dataFields.category = 'category'
        xAxis.renderer.cellStartLocation = 0.1;
        xAxis.renderer.cellEndLocation = 0.9;
        xAxis.renderer.minGridDistance = 10; //força mostrar colunas
        xAxis.renderer.grid.template.location = 0;
        xAxis.renderer.grid.template.disabled = true; //Retirando as linhas Horizontais

        const yAxis = chart.yAxes.push(new am4charts.ValueAxis());
        yAxis.min = 0;
        yAxis.renderer.grid.template.disabled = true; //Retirando as linhas Verticais
        yAxis.renderer.labels.template.disabled = true;

        function createSeries(value, name, color) {
            const series = chart.series.push(new am4charts.ColumnSeries())
            series.dataFields.valueY = value;
            series.dataFields.categoryX = 'category';
            series.name = name;
            series.events.on("hidden", carrangeColumns);
            series.events.on("shown", carrangeColumns);
            series.columns.template.fill = color;
            series.columns.template.strokeWidth = 0;
            series.columns.template.column.cornerRadiusTopLeft = 3;
            series.columns.template.column.cornerRadiusTopRight = 3;
            series.columns.template.tooltipText = "{name}\n {categoryX}: {valueY}";

            //values in top columns
            const bullet = series.bullets.push(new am4charts.LabelBullet())
            bullet.interactionsEnabled = false
            bullet.label.truncate = false;
            bullet.label.verticalCenter = "bottom";
            bullet.label.horizontalCenter = "middle";
            bullet.label.rotation = 0;
            bullet.dy = 0
            bullet.dx = 0
            bullet.fontSize = 11;
            bullet.label.text = '{valueY}';
            bullet.label.fill = am4core.color('#000');

            return series;
        }

        // Configure xAxis label
        const label = xAxis.renderer.labels.template;
        label.fontSize = 12;
        label.truncate = true;
        label.wrap = true;
        label.rotation = 0;
        label.horizontalCenter = "middle";
        label.verticalCenter = "middle";
        label.tooltipText = "{category}";

        createSeries('anoAnterior', '2022', am4core.color(colorGrey));
        createSeries('anoAtual', '2023', am4core.color(colorGreen));

        // Configure legend
        chart.legend = new am4charts.Legend()
        chart.legend.position = "bottom";
        chart.legend.paddingBottom = 0;
        chart.legend.fontSize = 12;
        chart.legend.labels.template.maxWidth = 100;
        chart.legend.labels.template.truncate = true;
        chart.legend.labels.template.wrap = true;

        // Configure marker legend
        const markerTemplate = chart.legend.markers.template;
        markerTemplate.width = 15;
        markerTemplate.height = 15;

        function carrangeColumns() {
            const series = chart.series.getIndex(0);

            const w = 1 - xAxis.renderer.cellStartLocation - (1 - xAxis.renderer.cellEndLocation);
            if (series.dataItems.length > 1) {
                const x0 = xAxis.getX(series.dataItems.getIndex(0), "categoryX");
                const x1 = xAxis.getX(series.dataItems.getIndex(1), "categoryX");
                const delta = ((x1 - x0) / chart.series.length) * w;

                if (am4core.isNumber(delta)) {
                    const middle = chart.series.length / 2;

                    let newIndex = 0;
                    chart.series.each(function(series) {
                        if (!series.isHidden && !series.isHiding) {
                            series.dummyData = newIndex;
                            newIndex++;
                        }
                        else {
                            series.dummyData = chart.series.indexOf(series);
                        }
                    })
                    const visibleCount = newIndex;
                    const newMiddle = visibleCount / 2;

                    chart.series.each(function(series) {
                        const trueIndex = chart.series.indexOf(series);
                        const newIndex = series.dummyData;

                        const dx = (newIndex - trueIndex + middle - newMiddle) * delta

                        series.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
                        series.bulletsContainer.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
                    })
                }
            }
        }
    })
</script>
